import 'dart:io';
import 'package:common_locale_data/src/locale_id/base_language_id.dart';
import 'package:path/path.dart' as p;
import '../utils/case_format.dart';
import '../utils/escape_dart_string.dart';
import '../utils/generate_class.dart';
import '../utils/read_json_data.dart';

// Converting subdivisions to a class increases compilation time > 3x.
// Therefore not done.

String? generateSubdivisions(String locale) {
  var buffer = StringBuffer();
  var data = readSubdivisions(locale);

  var baseLocale = getBaseLocale(locale)?.replaceAll('-', '_');
  var baseData = baseLocale == null ? null : readSubdivisions(baseLocale);

  var set = data.entries
      .map((e) => '${escapeDartString(e.key)}: ${escapeDartString(e.value)}')
      .toSet();
  var baseSet = baseData?.entries
      .map((e) => '${escapeDartString(e.key)}: ${escapeDartString(e.value)}')
      .toSet();

  var constMap = generateConstMap(
      set, baseSet, 'String', 'Subdivisions', 'Subdivisions', baseLocale);

  if (constMap != null) {
    buffer.writeln('''
class Subdivisions${locale.toUpperCamelCase()} extends Subdivisions${baseLocale?.toUpperCamelCase() ?? ''} {
  const Subdivisions${locale.toUpperCamelCase()}(super.cld);
''');

    buffer.write(constMap);
    buffer.writeln('}');
    return buffer.toString();
  } else {
    return null;
  }
}

Map<String, String> readSubdivisions(String locale) {
  // subdivision files not provided for all locales: fall back to base locale
  // also uses _ instead of -
  var languageId = BaseLanguageId.parse(locale);
  var fileNames = {
    languageId.toUnicodeCLDR(),
    languageId.toUnicodeBCP47(),
    BaseLanguageId(lang: languageId.lang, region: languageId.region)
        .toUnicodeCLDR(),
    BaseLanguageId(lang: languageId.lang, region: languageId.region)
        .toUnicodeBCP47(),
    BaseLanguageId(lang: languageId.lang, script: languageId.script)
        .toUnicodeCLDR(),
    BaseLanguageId(lang: languageId.lang, script: languageId.script)
        .toUnicodeBCP47(),
    BaseLanguageId(lang: languageId.lang).toUnicodeBCP47(),
  };

  var file = File('');
  for (var fileName in fileNames) {
    file = File(p.join('tool/data/subdivisions/$fileName.json'));
    if (file.existsSync()) {
      return readJsonData(
              file.path, 'subdivisions/localeDisplayNames/subdivisions')
          .cast();
    }
  }

  // Subdivisions not yet generated by default for cldr-json.
  // See: https://unicode-org.atlassian.net/browse/CLDR-11874
  if (!file.existsSync()) {
    for (var fileName in fileNames) {
      file = File(p.join('tool/data_manual/subdivisions/$fileName.json'));
      if (file.existsSync()) {
        return readJsonData(
                file.path, 'subdivisions/localeDisplayNames/subdivisions')
            .cast();
      }
    }
  }

  stderr.write('*** No subdivisions for $locale\n');
  return {};
}
